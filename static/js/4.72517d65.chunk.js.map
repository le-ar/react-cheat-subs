{"version":3,"sources":["features/tasks/presentation/store/taskStore.ts","features/tasks/presentation/widgets/taskCard.tsx","features/user/presentation/widgets/userWidget.tsx","features/tasks/data/entities/peices.ts","features/tasks/data/entities/addTask.ts","features/tasks/presentation/store/addTaskStore.ts","features/tasks/presentation/widgets/addTask.tsx","features/donate/presentation/stores/donateStore.ts","features/donate/presentation/widgets/donateWidget.tsx","features/tasks/presentation/store/myTasksStore.ts","features/tasks/presentation/widgets/myTasks.tsx","features/tasks/data/entities/task.ts","features/tasks/data/entities/myTask.ts","features/tasks/data/datasources/taskRemoteDatasource.ts","features/donate/data/datasources/donateRemoteDatasource.ts","features/tasks/presentation/pages/taskPage.tsx"],"names":["TaskStore","props","taskRemoteDatasource","this","isTasksLikesLoaded","loadTasksLikes","isTasksLikesLoading","tasksIds","tasksLikes","map","task","id","getLikesTask","bannedLikesTasks","result","Array","isArray","filter","isLikeTaskBanned","tasksLikesHasError","FailureTasksCompleted","tasksLikesError","Failure","taskId","banLikeTask","push","indexOf","userId","isTaskChecking","checkingTasks","key","encodeCompleteTask","completeTask","Base64","stringify","sha256","toString","double","substr","length","observable","action","TaskCard","inject","observer","event","preventDefault","onRefresh","header","className","title","href","onClick","handleRefresh","source","RefreshMinor","content","isLoading","size","color","renderTaskLikes","info","renderInfo","flipKey","getUniquieArrayKey","tasks","Section","icon","CameraMajorMonotone","resourceType","NoteMajorMonotone","type","handleComplete","variation","price","taskStore","flipId","runTask","url","doText","handleRemove","CancelSmallMinor","stopPropagation","onComplete","onRemove","win","window","open","checker","setInterval","closed","clearInterval","Component","UserWidget","authStore","myAccount","donateStore","myTasksStore","orders","orderCount","plain","setModalOpen","avatar","customer","name","point","CirclePlusMinor","textAlign","Prices","like","subscribeGroup","subscribeUser","AddTaskt","count","AddTaskStore","taskTypes","label","value","val","parseInt","_validTaskCount","_taskCount","loadPrices","taskUrl","taskSelected","addTaskSuccess","addTaskLoading","addTaskHasError","addTaskError","_isModalOpen","isPricesLoading","getPrices","prices","pricesHasError","pricesError","addTask","AddTask","taskCount","updateMyAccount","validTaskCount","computed","addTaskStore","needAddPoints","calculatedPrice","disabled","options","onChange","selected","min","setTaskCount","error","message","fieldID","loading","setIsModalOpen","isModalOpen","onClose","DonateStore","donateRemoteDatasource","loadExchange","exchangeLoading","exchangeError","getExchange","exchange","_sumRub","_sumPoints","rubToPoints","Number","isNaN","setSumError","_sumError","pointsToRub","rub","points","Math","round","isDonateLoading","donate","sumRub","donateError","focus","DonateWidget","setSumRub","sumPoints","setSumPoints","sumError","MyTasksStore","myTasks","isMyTasksAllLoaded","loadMyTasks","_myTasksError","myTasksLoading","myTasksNextLoading","taskOffset","getMyTasks","concat","cancelMyTask","MyTasks","taskStatus","status","actions","undefined","external","done","myTasksError","nextLoading","onScrolledToBottom","Task","MyTask","userName","userUrl","taskType","TaskRemoteDatasourceImpl","taskAllId","loadedTasks","bannedTasks","sleep","offset","DonateRemoteDatasourceImpl","sum","TaskPage","interval","mounted","refreshTasksLikes","handleLikesRefresh","removeTaskLikeById"],"mappings":"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","file":"static/js/4.72517d65.chunk.js","sourcesContent":["import TaskRemoteDatasource from \"../../data/datasources/taskRemoteDatasource\";\r\nimport { observable, action, computed } from \"mobx\";\r\nimport Task from \"../../data/entities/task\";\r\nimport { Failure, FailureTasksCompleted } from \"../../../../core/failures\";\r\nimport sha256 from 'crypto-js/sha256';\r\nimport Base64 from 'crypto-js/enc-base64';\r\n\r\nexport default class TaskStore {\r\n    private taskRemoteDatasource: TaskRemoteDatasource;\r\n\r\n    constructor(props: {\r\n        taskRemoteDatasource: TaskRemoteDatasource;\r\n    }) {\r\n        this.taskRemoteDatasource = props.taskRemoteDatasource;\r\n    }\r\n\r\n    @observable isTasksLikesLoading: boolean = false;\r\n    @observable isTasksLikesLoaded: boolean = false;\r\n    @observable tasksLikes: Task[] = [];\r\n    @observable tasksLikesHasError: boolean = false;\r\n    @observable tasksLikesError: string = '';\r\n\r\n    @action async refreshTasksLikes() {\r\n        this.isTasksLikesLoaded = false;\r\n        await this.loadTasksLikes();\r\n    }\r\n\r\n    @action async loadTasksLikes() {\r\n        this.isTasksLikesLoading = true;\r\n\r\n        let tasksIds = this.tasksLikes.map(task => task.id);\r\n        let result = await this.taskRemoteDatasource.getLikesTask(tasksIds, this.bannedLikesTasks);\r\n        if (Array.isArray(result)) {\r\n            this.tasksLikes = result.filter(task => !this.isLikeTaskBanned(task.id));\r\n            this.tasksLikesHasError = false;\r\n        } else {\r\n            if (result instanceof FailureTasksCompleted) {\r\n                this.tasksLikesHasError = true;\r\n                this.tasksLikesError = 'Задания на сегодня закончились!';\r\n            } else if (result instanceof Failure) {\r\n                this.tasksLikesHasError = true;\r\n                this.tasksLikesError = 'Обновите задания';\r\n            }\r\n        }\r\n\r\n        this.isTasksLikesLoading = false;\r\n        this.isTasksLikesLoaded = true;\r\n    }\r\n\r\n    @action removeTaskLikeById(taskId: number) {\r\n        this.tasksLikes = this.tasksLikes.filter(task => task.id !== taskId);\r\n        this.banLikeTask(taskId);\r\n        this.loadTasksLikes();\r\n    }\r\n\r\n    @observable bannedLikesTasks: number[] = [];\r\n    @action banLikeTask(taskId: number) {\r\n        this.bannedLikesTasks.push(taskId);\r\n    }\r\n    isLikeTaskBanned(taskId: number): boolean {\r\n        return this.bannedLikesTasks.indexOf(taskId) !== -1;\r\n    }\r\n\r\n    @observable checkingTasks: number[] = [];\r\n\r\n    @action async completeTask(taskId: number, userId: number) {\r\n        if (!this.isTaskChecking(taskId)) {\r\n            this.checkingTasks.push(taskId);\r\n        }\r\n\r\n        let key = this.encodeCompleteTask(taskId, userId);\r\n        await this.taskRemoteDatasource.completeTask(taskId, key);\r\n        \r\n        this.checkingTasks = this.checkingTasks.filter(id => id !== taskId);\r\n    }\r\n\r\n    isTaskChecking(taskId: number): boolean {\r\n        return this.checkingTasks.indexOf(taskId) !== -1;\r\n    }\r\n\r\n    private encodeCompleteTask(taskId: number, userId: number): string {\r\n        let key = Base64.stringify(\r\n            sha256(taskId.toString() + '-' + userId.toString())\r\n        );\r\n        let double = Base64.stringify(\r\n            sha256(key)\r\n        );\r\n        return double.substr(0, 3) + key.substr(key.length - 10, 3) + double.substr(double.length - 12, 2);\r\n    }\r\n}","import { Component } from \"react\"\r\nimport React from \"react\";\r\nimport { Icon, Spinner, Card, TextStyle, Button, Link } from \"@shopify/polaris\";\r\nimport { RefreshMinor } from '@shopify/polaris-icons';\r\nimport Task from \"../../data/entities/task\";\r\nimport { Flipper, Flipped } from \"react-flip-toolkit\";\r\nimport { CameraMajorMonotone } from '@shopify/polaris-icons';\r\nimport { NoteMajorMonotone } from '@shopify/polaris-icons';\r\nimport { CancelSmallMinor } from '@shopify/polaris-icons';\r\nimport TaskStore from \"../store/taskStore\";\r\nimport { inject, observer } from \"mobx-react\";\r\n\r\nexport interface TaskCardProps {\r\n    taskStore?: TaskStore;\r\n\r\n    title: string;\r\n    isLoading: boolean;\r\n    tasks: Task[];\r\n    doText: string;\r\n    info?: string;\r\n    onRefresh: () => void;\r\n    onRemove: (id: number) => void;\r\n    onComplete: (taskId: number) => void;\r\n}\r\n\r\n@inject('taskStore')\r\n@observer\r\nexport default class TaskCard extends Component<TaskCardProps> {\r\n    handleRefresh(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\r\n        event.preventDefault();\r\n        this.props.onRefresh();\r\n    }\r\n\r\n    render() {\r\n        let header = (\r\n            < div className=\"d-flex justify-content-between\" >\r\n                <h2 className=\"Polaris-Heading\">{this.props.title}</h2>\r\n                <a href=\"#\" className=\"d-flex\" onClick={(event) => this.handleRefresh(event)}>\r\n                    <Icon\r\n                        source={RefreshMinor} />\r\n                </a>\r\n            </div >\r\n        );\r\n\r\n        let content: JSX.Element | JSX.Element[] = <div></div>\r\n\r\n        if (this.props.isLoading) {\r\n            content = (\r\n                <div className=\"d-flex justify-content-center align-items-center flex-grow-1\">\r\n                    <Spinner size=\"large\" color=\"teal\" />\r\n                </div>\r\n            );\r\n        } else {\r\n            content = this.renderTaskLikes();\r\n        }\r\n\r\n        if (typeof this.props.info !== 'undefined') {\r\n            content = this.renderInfo();\r\n        }\r\n\r\n        return (\r\n            <div className=\"card-task\">\r\n                <Flipper flipKey={this.getUniquieArrayKey()}>\r\n                    <Card title={header}>\r\n                        {content}\r\n                    </Card>\r\n                </Flipper>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getUniquieArrayKey(): string {\r\n        let result = '';\r\n\r\n        for (let task of this.props.tasks) {\r\n            result += task.id + '-';\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private renderInfo(): JSX.Element {\r\n        return (\r\n            <div className=\"d-flex justify-content-center center align-items-center flex-grow-1 no-hover\">\r\n                <Card.Section>\r\n                    {this.props.info}\r\n                </Card.Section>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private renderTaskLikes(): JSX.Element | JSX.Element[] {\r\n        if (this.props.tasks.length === 0) {\r\n            return (\r\n                <div className=\"d-flex justify-content-center center align-items-center flex-grow-1 no-hover\">\r\n                    <Card.Section>\r\n                        Нет заданий\r\n                    </Card.Section>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return this.props.tasks.map<JSX.Element>((task) => {\r\n            let icon = CameraMajorMonotone;\r\n            if (task.resourceType === 'note') {\r\n                icon = NoteMajorMonotone;\r\n            }\r\n\r\n            let type = 'фотографию';\r\n            if (task.resourceType === 'note') {\r\n                type = 'запись на стене';\r\n            }\r\n\r\n            let completeTask = (\r\n                <div onClick={(event) => { this.handleComplete(event, task.id) }}>\r\n                    <Link>\r\n                        Получи <TextStyle variation=\"strong\">{task.price} поинтов</TextStyle>\r\n                    </Link>\r\n                </div>\r\n            );\r\n\r\n            if (this.props.taskStore?.isTaskChecking(task.id)) {\r\n                completeTask = <div>Проверка...</div>;\r\n            }\r\n\r\n            return (\r\n                <Card.Section key={task.id}>\r\n                    <Flipped flipId={task.id}>\r\n                        <div className=\"d-flex\" onClick={() => this.runTask(task.url, task.id)}>\r\n                            <div className=\"d-flex mr-2\">\r\n                                <Icon source={icon} />\r\n                            </div>\r\n                            <div className=\"flex-grow-1\">\r\n                                <div>{this.props.doText} {type}</div>\r\n                                {completeTask}\r\n                            </div>\r\n                            <div className=\"close\" onClick={(event) => this.handleRemove(event, task.id)}>\r\n                                <Icon source={CancelSmallMinor} />\r\n                            </div>\r\n                        </div>\r\n                    </Flipped>\r\n                </Card.Section>\r\n            );\r\n        });\r\n    }\r\n\r\n    private handleComplete(event: React.MouseEvent<HTMLDivElement, MouseEvent>, taskId: number) {\r\n        event.stopPropagation();\r\n        this.props.onComplete(taskId)\r\n    }\r\n\r\n    private handleRemove(event: React.MouseEvent<HTMLDivElement, MouseEvent>, taskId: number) {\r\n        event.stopPropagation()\r\n        this.props.onRemove(taskId);\r\n    }\r\n\r\n    private runTask(url: string, taskId: number) {\r\n        let win = window.open(url, '_blank', 'toolbar=0,location=0,menubar=0,width=1100,height=700');\r\n        let checker = setInterval(() => {\r\n            if (win?.closed) {\r\n                clearInterval(checker);\r\n                this.props.onComplete(taskId);\r\n            }\r\n        }, 350);\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport { inject, observer } from \"mobx-react\";\r\nimport { AuthStore } from \"../../../auth/presentation/stores/authStore\";\r\nimport { Avatar, Button, Loading } from \"@shopify/polaris\";\r\nimport { CirclePlusMinor } from '@shopify/polaris-icons';\r\nimport DonateStore from \"../../../donate/presentation/stores/donateStore\";\r\nimport MyTasksStore from \"../../../tasks/presentation/store/myTasksStore\";\r\n\r\ninterface UserWidgetProps {\r\n    authStore?: AuthStore;\r\n    donateStore?: DonateStore;\r\n    myTasksStore?: MyTasksStore;\r\n}\r\n\r\n@inject('authStore', 'donateStore', 'myTasksStore')\r\n@observer\r\nexport default class UserWidget extends Component<UserWidgetProps> {\r\n    render() {\r\n        if (typeof this.props.authStore === 'undefined' ||\r\n            this.props.authStore.myAccount === null ||\r\n            typeof this.props.donateStore === 'undefined' ||\r\n            typeof this.props.myTasksStore === 'undefined') {\r\n            return <Loading />;\r\n        }\r\n\r\n        let orders = (\r\n            <div></div>\r\n        );\r\n\r\n        if (this.props.authStore.myAccount.orderCount > 0) {\r\n            orders = (\r\n                <div className=\"mb-xs-1\">\r\n                    <Button plain onClick={() => {\r\n                        this.props.myTasksStore?.setModalOpen(true);\r\n                    }}>\r\n                        Мои задания\r\n                    </Button>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className=\"mb-4 profile\">\r\n                <div className=\"d-flex align-items-center mb-1\">\r\n                    <div className=\"mr-2\">\r\n                        <Avatar source={this.props.authStore.myAccount.avatar} customer />\r\n                    </div>\r\n                    <div>\r\n                        <div>\r\n                            {this.props.authStore.myAccount.name}\r\n                            {/* <Button plain>\r\n                                {this.props.authStore.myAccount.name}\r\n                            </Button> */}\r\n                        </div>\r\n                        <div className=\"d-flex fs-12\">\r\n                            <span className=\"mr-1\">Поинтов: {this.props.authStore.myAccount.point}</span>\r\n                            <Button plain icon={CirclePlusMinor} textAlign=\"left\" onClick={() => { this.props.donateStore?.setModalOpen(true) }} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {orders}\r\n                <Button plain>Выйти</Button>\r\n            </div>\r\n        );\r\n    }\r\n}","export default class Prices {\r\n    like: number;\r\n    subscribeGroup: number;\r\n    subscribeUser: number;\r\n\r\n    constructor(props: {\r\n        like: number;\r\n        subscribeGroup: number;\r\n        subscribeUser: number;\r\n    }) {\r\n        this.like = props.like;\r\n        this.subscribeGroup = props.subscribeGroup;\r\n        this.subscribeUser = props.subscribeUser;\r\n    }\r\n}","export type TaskType = 'like' | 'subscribeGroup' | 'subscribeUser';\r\n\r\nexport default class AddTaskt {\r\n    type: TaskType;\r\n    count: number;\r\n    url: string;\r\n\r\n    constructor(props: {\r\n        type: TaskType;\r\n        count: number;\r\n        url: string;\r\n    }) {\r\n        this.type = props.type;\r\n        this.count = props.count;\r\n        this.url = props.url;\r\n    }\r\n}","import { observable, action, computed } from \"mobx\";\r\nimport TaskRemoteDatasource from \"../../data/datasources/taskRemoteDatasource\";\r\nimport Prices from \"../../data/entities/peices\";\r\nimport AddTask, { TaskType } from \"../../data/entities/addTask\";\r\nimport { Failure } from \"../../../../core/failures\";\r\nimport { AuthStore } from \"../../../auth/presentation/stores/authStore\";\r\n\r\nexport default class AddTaskStore {\r\n    private taskRemoteDatasource: TaskRemoteDatasource;\r\n    private authStore: AuthStore;\r\n\r\n    constructor(props: {\r\n        taskRemoteDatasource: TaskRemoteDatasource;\r\n        authStore: AuthStore;\r\n    }) {\r\n        this.taskRemoteDatasource = props.taskRemoteDatasource;\r\n        this.authStore = props.authStore;\r\n    }\r\n\r\n    taskTypes = [\r\n        { label: 'Лайки', value: 'like' },\r\n        { label: 'Подписчики в группу', value: 'subscribeGroup' },\r\n        { label: 'Подписчики пользователю', value: 'subscribeUser' },\r\n    ];\r\n    @observable taskSelected: TaskType = 'like';\r\n\r\n    @observable taskUrl: string = '';\r\n    @observable private _taskCount: string = '';\r\n    @observable private _validTaskCount: boolean = true;\r\n    @computed get validTaskCount(): boolean {\r\n        return this._validTaskCount;\r\n    }\r\n    @computed get taskCount(): string {\r\n        return this._taskCount;\r\n    }\r\n    @action setTaskCount(value: string) {\r\n        let val = parseInt(value);\r\n        if (typeof val === 'undefined' || val < 1) {\r\n            this._validTaskCount = false;\r\n        } else {\r\n            this._validTaskCount = true;\r\n        }\r\n        this._taskCount = value;\r\n    }\r\n\r\n    @computed get calculatedPrice(): string {\r\n        if (this.prices === null || !this.validTaskCount) {\r\n            return '0';\r\n        }\r\n        let price = this.prices.like;\r\n        if (this.taskSelected === 'subscribeGroup') {\r\n            price = this.prices.subscribeGroup;\r\n        } else if (this.taskSelected === 'subscribeUser') {\r\n            price = this.prices.subscribeUser;\r\n        }\r\n\r\n        return (parseInt(this.taskCount) * price).toString();\r\n    }\r\n\r\n    @observable private _isModalOpen: boolean = false;\r\n    @computed get isModalOpen(): boolean {\r\n        return this._isModalOpen;\r\n    }\r\n    @action setIsModalOpen(open: boolean) {\r\n        if (open) {\r\n            this.loadPrices();\r\n            this.taskUrl = '';\r\n            this.taskSelected = 'like';\r\n            this._taskCount = '1';\r\n            this._validTaskCount = true;\r\n            this.addTaskSuccess = false;\r\n            this.addTaskLoading = false;\r\n            this.addTaskHasError = false;\r\n            this.addTaskError = '';\r\n            this.addTaskSuccess = false;\r\n        }\r\n\r\n        this._isModalOpen = open;\r\n    }\r\n\r\n    @observable pricesError: string = '';\r\n    @observable pricesHasError: boolean = false;\r\n    @observable isPricesLoading: boolean = true;\r\n    @observable prices: Prices | null = null;\r\n\r\n    @action async loadPrices() {\r\n        this.isPricesLoading = true;\r\n\r\n        let result = await this.taskRemoteDatasource.getPrices();\r\n        if (result instanceof Prices) {\r\n            this.prices = result;\r\n            this.pricesHasError = false;\r\n        } else {\r\n            this.pricesError = 'Обновите страницу';\r\n            this.pricesHasError = true;\r\n        }\r\n\r\n        this.isPricesLoading = false;\r\n    }\r\n\r\n    @observable addTaskSuccess: boolean = false;\r\n    @observable addTaskLoading: boolean = false;\r\n    @observable addTaskHasError: boolean = false;\r\n    @observable addTaskError: string = '';\r\n    @action async addTask() {\r\n        this.addTaskLoading = true;\r\n        this.addTaskHasError = false;\r\n        this.addTaskError = '';\r\n\r\n        let result = await this.taskRemoteDatasource.addTask(new AddTask({\r\n            type: this.taskSelected,\r\n            count: parseInt(this.taskCount),\r\n            url: this.taskUrl\r\n        }));\r\n        if (result instanceof Failure) {\r\n            this.addTaskHasError = true;\r\n            this.addTaskError = 'Попробуйте позже';\r\n        } else {\r\n            this.addTaskHasError = false;\r\n            this.addTaskError = '';\r\n            this.addTaskSuccess = true;\r\n            this.authStore.updateMyAccount();\r\n        }\r\n\r\n        this.addTaskLoading = false;\r\n    }\r\n}","import { Component } from \"react\"\r\nimport { Modal, FormLayout, TextField, Select, Button, InlineError } from \"@shopify/polaris\";\r\nimport React from \"react\";\r\nimport AddTaskStore from \"../store/addTaskStore\";\r\nimport { inject, observer } from \"mobx-react\";\r\nimport { AuthStore } from \"../../../auth/presentation/stores/authStore\";\r\nimport { TaskType } from \"../../data/entities/addTask\";\r\nimport DonateStore from \"../../../donate/presentation/stores/donateStore\";\r\n\r\nexport interface AddTaskProps {\r\n    addTaskStore?: AddTaskStore;\r\n    authStore?: AuthStore;\r\n    donateStore?: DonateStore;\r\n}\r\n\r\n@inject('addTaskStore', 'authStore', 'donateStore')\r\n@observer\r\nexport default class AddTask extends Component<AddTaskProps> {\r\n    render() {\r\n        let content = <div></div>;\r\n\r\n        if (!this.props.addTaskStore?.isPricesLoading) {\r\n            if (this.props.addTaskStore?.pricesHasError) {\r\n                content = <div>{this.props.addTaskStore.pricesError}</div>;\r\n            } else {\r\n                let needAddPoints: boolean = parseInt(this.props.addTaskStore!.calculatedPrice) > this.props.authStore!.myAccount!.point;\r\n\r\n                content = (\r\n                    <FormLayout>\r\n                        <Select\r\n                            disabled={this.props.addTaskStore?.addTaskLoading}\r\n                            label=\"Тип\"\r\n                            options={this.props.addTaskStore?.taskTypes}\r\n                            onChange={(selected: TaskType) => { this.props.addTaskStore!.taskSelected = selected; }}\r\n                            value={this.props.addTaskStore!.taskSelected}\r\n                        />\r\n                        <TextField\r\n                            disabled={this.props.addTaskStore?.addTaskLoading}\r\n                            label=\"Ссылка\"\r\n                            value={this.props.addTaskStore!.taskUrl}\r\n                            onChange={(value) => { this.props.addTaskStore!.taskUrl = value; }}\r\n                        />\r\n                        <TextField\r\n                            disabled={this.props.addTaskStore?.addTaskLoading}\r\n                            min={1}\r\n                            type=\"number\"\r\n                            label=\"Кол-во\"\r\n                            value={this.props.addTaskStore?.taskCount}\r\n                            onChange={(value) => { this.props.addTaskStore?.setTaskCount(value) }}\r\n                            error={this.props.addTaskStore?.validTaskCount ? '' : 'Кол-во должно быть больше 0'}\r\n                        />\r\n                        <TextField\r\n                            label=\"Стоимость\"\r\n                            value={this.props.addTaskStore?.calculatedPrice}\r\n                            disabled={true}\r\n                        />\r\n                        <InlineError message={this.props.addTaskStore!.addTaskError} fieldID=\"\" />\r\n                        <div className=\"d-flex\">\r\n                            <div className=\"mr-1\">\r\n                                <Button\r\n                                    disabled={needAddPoints || !this.props.addTaskStore?.validTaskCount}\r\n                                    loading={this.props.addTaskStore?.addTaskLoading}\r\n                                    onClick={() => { this.props.addTaskStore?.addTask() }}\r\n                                >\r\n                                    Добавить\r\n                                </Button>\r\n                            </div>\r\n                            <Button plain onClick={() => {\r\n                                this.props.addTaskStore?.setIsModalOpen(false);\r\n                                this.props.donateStore?.setModalOpen(true);\r\n                            }}>Пополнить счет</Button>\r\n                        </div>\r\n                    </FormLayout>\r\n                );\r\n\r\n                if (this.props.addTaskStore?.addTaskSuccess) {\r\n                    content = (\r\n                        <div>\r\n                            <h1>Успешно добавлено!</h1>\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        return (\r\n            <Modal\r\n                title=\"Добавление задания\"\r\n                open={this.props.addTaskStore!.isModalOpen}\r\n                onClose={() => { this.props.addTaskStore!.setIsModalOpen(false) }}\r\n                loading={this.props.addTaskStore?.isPricesLoading}\r\n            >\r\n                <Modal.Section>\r\n                    {content}\r\n                </Modal.Section>\r\n            </Modal>\r\n        );\r\n    }\r\n}","import DonateRemoteDatasource from \"../../data/datasources/donateRemoteDatasource\";\r\nimport { observable, computed, action } from \"mobx\";\r\nimport { Failure } from \"../../../../core/failures\";\r\n\r\nexport default class DonateStore {\r\n    private donateRemoteDatasource: DonateRemoteDatasource;\r\n\r\n    constructor(props: {\r\n        donateRemoteDatasource: DonateRemoteDatasource;\r\n    }) {\r\n        this.donateRemoteDatasource = props.donateRemoteDatasource;\r\n    }\r\n\r\n    @observable private _isModalOpen: boolean = false;\r\n    @computed get isModalOpen(): boolean {\r\n        return this._isModalOpen;\r\n    }\r\n    @action setModalOpen(open: boolean) {\r\n        if (open) {\r\n            this.loadExchange();\r\n        }\r\n        this._isModalOpen = open;\r\n    }\r\n\r\n    @observable exchangeLoading: boolean = false;\r\n    @observable exchange: number = 0;\r\n    @observable exchangeError: string = '';\r\n    @action async loadExchange() {\r\n        this.exchangeLoading = true;\r\n        this.exchangeError = '';\r\n\r\n        let result = await this.donateRemoteDatasource.getExchange();\r\n        if (result instanceof Failure) {\r\n            this.exchangeError = 'Попробуйте позже';\r\n        } else {\r\n            this.exchange = result;\r\n            this._sumRub = '10';\r\n            this._sumPoints = this.rubToPoints(10).toString();\r\n        }\r\n\r\n        this.exchangeLoading = false;\r\n    }\r\n\r\n    @observable private _sumError: string = '';\r\n    @computed get sumError() {\r\n        return this._sumError;\r\n    }\r\n    @observable private _sumRub: string = '10';\r\n    @observable private _sumPoints: string = '10';\r\n    @computed get sumRub() {\r\n        return this._sumRub;\r\n    }\r\n    @computed get sumPoints() {\r\n        return this._sumPoints;\r\n    }\r\n    @action setSumRub(value: string) {\r\n        this._sumRub = value;\r\n\r\n        let val = parseInt(value);\r\n        if (typeof val === 'undefined' || Number.isNaN(val)) {\r\n            this.setSumError();\r\n        } else {\r\n            if (val < 5) {\r\n                this.setSumError();\r\n            } else {\r\n                this._sumError = '';\r\n            }\r\n            this._sumPoints = this.rubToPoints(val).toString();\r\n        }\r\n    }\r\n    @action setSumPoints(value: string) {\r\n        this._sumPoints = value;\r\n\r\n        let val = parseInt(value);\r\n        if (typeof val === 'undefined' || Number.isNaN(val)) {\r\n            this.setSumError();\r\n        } else {\r\n            if (this.pointsToRub(val) < 5) {\r\n                this.setSumError();\r\n            } else {\r\n                this._sumError = '';\r\n            }\r\n            this._sumRub = this.pointsToRub(val).toString();\r\n        }\r\n    }\r\n\r\n    @action private setSumError() {\r\n        this._sumError = 'сумма не должна быть меньше 5 руб';\r\n    }\r\n\r\n    private rubToPoints(rub: number) {\r\n        return rub * this.exchange;\r\n    }\r\n\r\n    private pointsToRub(points: number) {\r\n        return Math.round(points / this.exchange * 100) / 100;\r\n    }\r\n\r\n    @observable isDonateLoading: boolean = false;\r\n    @observable donateError: string = '';\r\n    @action async donate() {\r\n        this.isDonateLoading = true;\r\n\r\n        let result = await this.donateRemoteDatasource.donate(parseInt(this.sumRub));\r\n        if (result instanceof Failure) {\r\n            this.donateError = 'Попробуйте позже';\r\n        } else {\r\n            let win = window.open(result, '_blank');\r\n            if (win !== null) {\r\n                win.focus();\r\n            }\r\n        }\r\n\r\n        this.isDonateLoading = false;\r\n    }\r\n}","import { Component } from \"react\";\r\nimport { Modal, Loading, FormLayout, TextField, InlineError, Button } from \"@shopify/polaris\";\r\nimport React from \"react\";\r\nimport { inject, observer } from \"mobx-react\";\r\nimport DonateStore from \"../stores/donateStore\";\r\nimport { observable } from \"mobx\";\r\n\r\nexport interface DonateWidgetProps {\r\n    donateStore?: DonateStore\r\n}\r\n\r\n@inject('donateStore')\r\n@observer\r\nexport default class DonateWidget extends Component<DonateWidgetProps> {\r\n    render() {\r\n        if (typeof this.props.donateStore === 'undefined') {\r\n            return <Loading />;\r\n        }\r\n\r\n        let content = (\r\n            <div><InlineError message={this.props.donateStore.exchangeError} fieldID=\"\" /></div>\r\n        );\r\n        if (this.props.donateStore.exchangeError.length === 0) {\r\n            content = (\r\n                <FormLayout>\r\n                    <TextField label=\"Рубли\"\r\n                        type=\"number\"\r\n                        value={this.props.donateStore.sumRub}\r\n                        onChange={(value) => {\r\n                            this.props.donateStore?.setSumRub(value);\r\n                        }}\r\n                    />\r\n                    <TextField label=\"Поинты\"\r\n                        type=\"number\"\r\n                        value={this.props.donateStore.sumPoints}\r\n                        onChange={(value) => {\r\n                            this.props.donateStore?.setSumPoints(value);\r\n                        }}\r\n                    />\r\n                    <InlineError message={this.props.donateStore.sumError} fieldID=\"\" />\r\n                    <InlineError message={this.props.donateStore.donateError} fieldID=\"\" />\r\n                    <Button\r\n                        loading={this.props.donateStore.isDonateLoading}\r\n                        disabled={this.props.donateStore.sumError.length > 0}\r\n                        onClick={() => {\r\n                            this.props.donateStore?.donate();\r\n                        }}\r\n                    >\r\n                        Пополнить\r\n                    </Button>\r\n                </FormLayout>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Modal\r\n                loading={this.props.donateStore.exchangeLoading}\r\n                title=\"Пополнение счета\"\r\n                open={this.props.donateStore.isModalOpen}\r\n                onClose={() => {\r\n                    this.props.donateStore?.setModalOpen(false);\r\n                }}\r\n            >\r\n                <Modal.Section>\r\n                    {content}\r\n                </Modal.Section>\r\n            </Modal>\r\n        );\r\n    }\r\n}","import TaskRemoteDatasource from \"../../data/datasources/taskRemoteDatasource\";\r\nimport { observable, action, computed } from \"mobx\";\r\nimport Task from \"../../data/entities/task\";\r\nimport { Failure } from \"../../../../core/failures\";\r\nimport MyTask from \"../../data/entities/myTask\";\r\n\r\nexport default class MyTasksStore {\r\n    private taskRemoteDatasource: TaskRemoteDatasource;\r\n\r\n    constructor(props: {\r\n        taskRemoteDatasource: TaskRemoteDatasource;\r\n    }) {\r\n        this.taskRemoteDatasource = props.taskRemoteDatasource;\r\n    }\r\n\r\n    @observable private _isModalOpen: boolean = false;\r\n    @computed get isModalOpen(): boolean {\r\n        return this._isModalOpen;\r\n    }\r\n    @action setModalOpen(open: boolean) {\r\n        if (open) {\r\n            this.myTasks = [];\r\n            this.isMyTasksAllLoaded = false;\r\n            this.loadMyTasks();\r\n        }\r\n        this._isModalOpen = open;\r\n    }\r\n\r\n    @observable myTasksNextLoading: boolean = false;\r\n    @observable isMyTasksAllLoaded: boolean = false;\r\n    @observable myTasks: MyTask[] = [];\r\n    @observable myTasksLoading: boolean = false;\r\n    @observable private _myTasksError: string = '';\r\n    @computed get myTasksError(): string {\r\n        return this._myTasksError;\r\n    }\r\n    @action async loadMyTasks() {\r\n        if (this._myTasksError.length > 0 || this.isMyTasksAllLoaded) {\r\n            return;\r\n        }\r\n        if (this.myTasks.length === 0) {\r\n            this.myTasksLoading = true;\r\n        }\r\n        this.myTasksNextLoading = true;\r\n\r\n        let taskOffset = 0;\r\n        if (this.myTasks.length > 0) {\r\n            taskOffset = this.myTasks[this.myTasks.length - 1].id\r\n        }\r\n\r\n        let result = await this.taskRemoteDatasource.getMyTasks(taskOffset);\r\n        if (result instanceof Failure) {\r\n            this._myTasksError = 'Попробуйте позже';\r\n        } else {\r\n            this._myTasksError = '';\r\n            if (this.myTasks.length === 0) {\r\n                this.myTasks = result;\r\n            } else {\r\n                if (result.length === 0) {\r\n                    this.isMyTasksAllLoaded = true;\r\n                }\r\n                this.myTasks = this.myTasks.concat(result);\r\n            }\r\n        }\r\n\r\n        this.myTasksLoading = false;\r\n        this.myTasksNextLoading = false;\r\n    }\r\n\r\n    @action async cancelTask(taskId: number) {\r\n        await this.taskRemoteDatasource.cancelMyTask(taskId);\r\n    }\r\n}","import { Component } from \"react\";\r\nimport React from \"react\";\r\nimport { Modal, Loading, Icon, Button, Link, Spinner, TextStyle } from \"@shopify/polaris\";\r\nimport MyTasksStore from \"../store/myTasksStore\";\r\nimport { inject, observer } from \"mobx-react\";\r\nimport { CameraMajorMonotone, NoteMajorMonotone } from \"@shopify/polaris-icons\";\r\n\r\nexport interface MyTasksProps {\r\n    myTasksStore?: MyTasksStore;\r\n}\r\n\r\n@inject('myTasksStore')\r\n@observer\r\nexport default class MyTasks extends Component<MyTasksProps> {\r\n    render() {\r\n        if (typeof this.props.myTasksStore === 'undefined') {\r\n            return <Loading />;\r\n        }\r\n\r\n        let content: JSX.Element | JSX.Element[] = this.props.myTasksStore.myTasks.map(task => {\r\n            let icon = CameraMajorMonotone;\r\n            if (task.resourceType === 'note') {\r\n                icon = NoteMajorMonotone;\r\n            }\r\n\r\n            let name = 'Поставили лайки';\r\n            if (task.resourceType === 'note') {\r\n                name = 'Подписались'\r\n            }\r\n\r\n            let taskStatus = (\r\n                <TextStyle>В работе</TextStyle>\r\n            );\r\n            if (task.status === 'Done') {\r\n                taskStatus = (\r\n                    <TextStyle variation=\"positive\">Выполнен</TextStyle>\r\n                );\r\n            } else if (task.status === 'Canceled') {\r\n                taskStatus = (\r\n                    <TextStyle variation=\"strong\">Отменен</TextStyle>\r\n                );\r\n            } else if (task.status === 'Banned') {\r\n                taskStatus = (\r\n                    <TextStyle variation=\"negative\">Заблокирован</TextStyle>\r\n                );\r\n            }\r\n\r\n            let actions: JSX.Element | undefined = undefined;\r\n            if (task.status === 'Started') {\r\n                actions = (\r\n                    <div className=\"d-flex\">\r\n                        {/* <div className=\"mr-1\">\r\n                            <Button plain>Пополнить</Button>\r\n                        </div> */}\r\n                        <Button plain>Отменить</Button>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <Modal.Section key={task.id}>\r\n                    <div className=\"d-flex\">\r\n                        <div className=\"mr-2\">\r\n                            <Icon source={icon} />\r\n                        </div>\r\n                        <div className=\"my-task__main mr-1\">\r\n                            <div className=\"my-task__url\">\r\n                                <Link url=\"https://google.com\" external>\r\n                                    <span>{task.name}</span>\r\n                                </Link>\r\n                            </div>\r\n                            <div>{name} {task.done}/{task.orderCount}</div>\r\n                            {actions}\r\n                        </div>\r\n                        <div>\r\n                            {taskStatus}\r\n                        </div>\r\n                    </div>\r\n                </Modal.Section>\r\n            );\r\n        });\r\n\r\n        if (this.props.myTasksStore.myTasksError.length > 0) {\r\n            content = (\r\n                <Modal.Section>\r\n                    {this.props.myTasksStore.myTasksError}\r\n                </Modal.Section>\r\n            );\r\n        }\r\n\r\n        if (Array.isArray(content)) {\r\n            let nextLoading = <div key=\"loading\"></div>;\r\n\r\n            if (!this.props.myTasksStore.isMyTasksAllLoaded) {\r\n                nextLoading = (\r\n                    <Modal.Section key=\"loading\">\r\n                        <div className=\"d-flex justify-content-center\" >\r\n                            <Button plain onClick={() => this.props.myTasksStore?.loadMyTasks()}>Загрузить еще</Button>\r\n                        </div>\r\n                    </Modal.Section>\r\n                );\r\n                if (this.props.myTasksStore?.myTasksNextLoading) {\r\n                    nextLoading = (\r\n                        <Modal.Section key=\"loading\">\r\n                            <div className=\"d-flex justify-content-center\">\r\n                                <Spinner size=\"small\" />\r\n                            </div>\r\n                        </Modal.Section>\r\n                    );\r\n                }\r\n            }\r\n\r\n            content.push(nextLoading);\r\n        }\r\n\r\n        return (\r\n            <Modal\r\n                loading={this.props.myTasksStore.myTasksLoading}\r\n                onScrolledToBottom={() => this.props.myTasksStore?.loadMyTasks()}\r\n                title=\"Мои задания\"\r\n                open={this.props.myTasksStore.isModalOpen}\r\n                onClose={() => { this.props.myTasksStore?.setModalOpen(false) }}\r\n            >\r\n                {content}\r\n            </Modal>\r\n        );\r\n    }\r\n}","export type TaskResourceType = 'photo' | 'note' | 'user' | 'group';\r\n\r\nexport default class Task {\r\n    id: number;\r\n    resourceType: TaskResourceType;\r\n    price: number;\r\n    url: string;\r\n\r\n    constructor(props: {\r\n        id: number;\r\n        resourceType: TaskResourceType;\r\n        price: number;\r\n        url: string;\r\n    }) {\r\n        this.id = props.id;\r\n        this.resourceType = props.resourceType;\r\n        this.price = props.price;\r\n        this.url = props.url;\r\n    }\r\n}","import Task, { TaskResourceType } from \"./task\";\r\nimport { TaskType } from \"./addTask\";\r\n\r\nexport type MyTaskStatus = 'Started' | 'Canceled' | 'Done' | 'Banned';\r\n\r\nexport default class MyTask extends Task {\r\n    userId: number;\r\n    userName: string;\r\n    userUrl: string;\r\n    done: number;\r\n    orderCount: number;\r\n    name: string;\r\n    taskType: TaskType;\r\n    status: MyTaskStatus;\r\n\r\n    constructor(props: {\r\n        id: number;\r\n        resourceType: TaskResourceType;\r\n        price: number;\r\n        url: string;\r\n        userId: number;\r\n        userName: string;\r\n        userUrl: string;\r\n        done: number;\r\n        orderCount: number;\r\n        name: string;\r\n        taskType: TaskType; \r\n        status: MyTaskStatus;\r\n    }) {\r\n        super({\r\n            id: props.id,\r\n            resourceType: props.resourceType,\r\n            price: props.price,\r\n            url: props.url,\r\n        });\r\n\r\n        this.userId = props.userId;\r\n        this.userName = props.userName;\r\n        this.userUrl = props.userUrl;\r\n        this.done = props.done;\r\n        this.orderCount = props.orderCount;\r\n        this.name = props.name;\r\n        this.taskType = props.taskType;\r\n        this.status = props.status;\r\n    }\r\n}","import { Failure, FailureTasksCompleted } from \"../../../../core/failures\";\r\nimport { sleep } from \"../../../../core/utils\";\r\nimport Task from \"../entities/task\";\r\nimport Prices from \"../entities/peices\";\r\nimport AddTask from \"../entities/addTask\";\r\nimport MyTask from \"../entities/myTask\";\r\n\r\nexport default interface TaskRemoteDatasource {\r\n    getLikesTask(loadedTasks: number[], bannedTasks: number[]): Promise<Failure | Task[]>;\r\n    addTask(task: AddTask): Promise<Failure | null>;\r\n    getPrices(): Promise<Failure | Prices>;\r\n    getMyTasks(offset: number): Promise<Failure | MyTask[]>;\r\n    completeTask(taskId: number, key: string): Promise<Failure | null>;\r\n    cancelMyTask(taskId: number): Promise<Failure | null>;\r\n}\r\n\r\nexport class TaskRemoteDatasourceImpl implements TaskRemoteDatasource {\r\n    taskAllId = 0;\r\n    async getLikesTask(loadedTasks: number[], bannedTasks: number[]): Promise<Failure | Task[]> {\r\n        await sleep(1000);\r\n\r\n        // return new Failure();\r\n        // return new FailureTasksCompleted();\r\n        // return [];\r\n        // if (this.taskAllId > 10) {\r\n        //     return [];\r\n        // }\r\n\r\n        return [\r\n            new Task({\r\n                id: 1,\r\n                price: 5,\r\n                url: 'https://vk.com',\r\n                resourceType: 'note',\r\n            }),\r\n            new Task({\r\n                id: 2,\r\n                price: 5,\r\n                url: 'https://vk.com',\r\n                resourceType: 'photo',\r\n            }),\r\n            new Task({\r\n                id: 3,\r\n                price: 5,\r\n                url: 'https://vk.com',\r\n                resourceType: 'photo',\r\n            }),\r\n            new Task({\r\n                id: 4,\r\n                price: 5,\r\n                url: 'https://vk.com',\r\n                resourceType: 'note',\r\n            }),\r\n            new Task({\r\n                id: 5,\r\n                price: 5,\r\n                url: 'https://vk.com',\r\n                resourceType: 'note',\r\n            }),\r\n        ];\r\n    }\r\n\r\n    async getPrices(): Promise<Failure | Prices> {\r\n        await sleep(500);\r\n        // return new Failure();\r\n        return new Prices({\r\n            like: 1,\r\n            subscribeGroup: 2,\r\n            subscribeUser: 2\r\n        });\r\n    }\r\n\r\n    async addTask(task: AddTask): Promise<Failure | null> {\r\n        await sleep(500);\r\n\r\n        // return new Failure();\r\n        return null;\r\n    }\r\n\r\n    taskId = 0;\r\n    \r\n    async getMyTasks(offset: number): Promise<Failure | MyTask[]> {\r\n        // return new Failure();\r\n        if (offset === 0) {\r\n            this.taskId = 0;\r\n        }\r\n        await sleep(1000);\r\n        if (this.taskId > 12) {\r\n            return [];\r\n        }\r\n\r\n        return [\r\n            new MyTask({\r\n                id: this.taskId++,\r\n                resourceType: 'photo',\r\n                price: 100,\r\n                url: 'https://google.com',\r\n                userId: 0,\r\n                userName: 'Фамилия Имя',\r\n                userUrl: 'https://google.com',\r\n                done: 4,\r\n                orderCount: 10,\r\n                name: 'photo123129381111111111111111111111',\r\n                taskType: 'like',\r\n                status: 'Started',\r\n            }),\r\n            new MyTask({\r\n                id: this.taskId++,\r\n                resourceType: 'note',\r\n                price: 100,\r\n                url: 'https://google.com',\r\n                userId: 0,\r\n                userName: 'Фамилия Имя',\r\n                userUrl: 'https://google.com',\r\n                done: 4,\r\n                orderCount: 10,\r\n                name: 'wall12312938',\r\n                taskType: 'like',\r\n                status: 'Done',\r\n            }),\r\n            new MyTask({\r\n                id: this.taskId++,\r\n                resourceType: 'group',\r\n                price: 100,\r\n                url: 'https://google.com',\r\n                userId: 0,\r\n                userName: 'Фамилия Имя',\r\n                userUrl: 'https://google.com',\r\n                done: 4,\r\n                orderCount: 10,\r\n                name: 'group12312938',\r\n                taskType: 'subscribeGroup',\r\n                status: 'Canceled',\r\n            }),\r\n            new MyTask({\r\n                id: this.taskId++,\r\n                resourceType: 'user',\r\n                price: 100,\r\n                url: 'https://google.com',\r\n                userId: 0,\r\n                userName: 'Фамилия Имя',\r\n                userUrl: 'https://google.com',\r\n                done: 4,\r\n                orderCount: 10,\r\n                name: 'id12312938',\r\n                taskType: 'subscribeUser',\r\n                status: 'Banned',\r\n            }),\r\n        ];\r\n    }\r\n\r\n    async completeTask(taskId: number, key: string): Promise<Failure | null> {\r\n        await sleep(500);\r\n        return new Failure();\r\n    }\r\n\r\n    async cancelMyTask(taskId: number): Promise<Failure | MyTask> {\r\n        return new Failure();\r\n    }\r\n}","import { sleep } from \"../../../../core/utils\";\r\nimport { Failure } from \"../../../../core/failures\";\r\n\r\nexport default interface DonateRemoteDatasource {\r\n    donate(sum: number): Promise<Failure | string>;\r\n    getExchange(): Promise<Failure | number>;\r\n}\r\n\r\nexport class DonateRemoteDatasourceImpl implements DonateRemoteDatasource {\r\n    async donate(sum: number): Promise<Failure | string> {\r\n        await sleep(500);\r\n\r\n        // return new Failure();\r\n        return 'https://google.com';\r\n    }\r\n\r\n    async getExchange(): Promise<Failure | number> {\r\n        await sleep(350);\r\n\r\n        // return new Failure();\r\n        return 3;\r\n    }\r\n}","import { Component } from \"react\";\r\nimport React from \"react\";\r\nimport { Loading, Button } from \"@shopify/polaris\";\r\nimport TaskStore from \"../store/taskStore\";\r\nimport { inject, observer, Provider } from \"mobx-react\";\r\nimport { AuthStore } from \"../../../auth/presentation/stores/authStore\";\r\nimport { observable } from \"mobx\";\r\nimport TaskCard from \"../widgets/taskCard\";\r\nimport UserWidget from \"../../../user/presentation/widgets/userWidget\";\r\nimport AddTaskStore from \"../store/addTaskStore\";\r\nimport AddTask from \"../widgets/addTask\";\r\nimport DonateStore from \"../../../donate/presentation/stores/donateStore\";\r\nimport DonateWidget from \"../../../donate/presentation/widgets/donateWidget\";\r\nimport MyTasksStore from \"../store/myTasksStore\";\r\nimport MyTasks from \"../widgets/myTasks\";\r\nimport { TaskRemoteDatasourceImpl } from '../../data/datasources/taskRemoteDatasource';\r\nimport { DonateRemoteDatasourceImpl } from '../../../donate/data/datasources/donateRemoteDatasource';\r\n\r\ninterface TaskPageProps {\r\n    authStore?: AuthStore;\r\n}\r\n\r\n@inject('authStore')\r\n@observer\r\nexport default class TaskPage extends Component<TaskPageProps> {\r\n    private interval: NodeJS.Timeout | null = null;\r\n    @observable private taskStore?: TaskStore;\r\n    @observable private addTaskStore?: AddTaskStore;\r\n    @observable private donateStore?: DonateStore;\r\n    @observable private myTasksStore?: MyTasksStore;\r\n\r\n    componentWillUnmount() {\r\n        if (this.interval !== null) {\r\n            clearInterval(this.interval);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.mounted();\r\n    }\r\n\r\n    async mounted() {\r\n        let taskRemoteDatasource = new TaskRemoteDatasourceImpl();\r\n        let donateRemoteDatasource = new DonateRemoteDatasourceImpl();\r\n\r\n        this.addTaskStore = new AddTaskStore({\r\n            taskRemoteDatasource,\r\n            authStore: this.props.authStore!\r\n        });\r\n        this.taskStore = new TaskStore({\r\n            taskRemoteDatasource,\r\n        });\r\n        this.donateStore = new DonateStore({\r\n            donateRemoteDatasource\r\n        });\r\n        this.myTasksStore = new MyTasksStore({\r\n            taskRemoteDatasource\r\n        });\r\n\r\n        this.taskStore.refreshTasksLikes();\r\n\r\n        this.interval = setInterval(() => {\r\n            if (!this.taskStore?.isTasksLikesLoading) {\r\n                this.taskStore?.loadTasksLikes();\r\n            }\r\n        }, 5000);\r\n    }\r\n\r\n    handleLikesRefresh() {\r\n        this.taskStore?.refreshTasksLikes();\r\n    }\r\n\r\n    render() {\r\n        if (typeof this.taskStore === 'undefined' ||\r\n            typeof this.addTaskStore === 'undefined' ||\r\n            typeof this.donateStore === 'undefined' ||\r\n            typeof this.myTasksStore === 'undefined') {\r\n            return <Loading />;\r\n        }\r\n\r\n        let likesInfo;\r\n        if (this.taskStore?.isTasksLikesLoaded) {\r\n            if (this.taskStore.tasksLikesHasError) {\r\n                likesInfo = this.taskStore?.tasksLikesError;\r\n            }\r\n        }\r\n\r\n        let info;\r\n        if (this.taskStore.tasksLikesHasError) {\r\n            info = this.taskStore.tasksLikesError;\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Provider donateStore={this.donateStore} myTasksStore={this.myTasksStore}>\r\n                    <div>\r\n                        <UserWidget />\r\n                        <MyTasks />\r\n                    </div>\r\n                    <div className=\"mb-1\">\r\n                        <Button plain onClick={() => {\r\n                            this.addTaskStore!.setIsModalOpen(true);\r\n                        }}>\r\n                            Добавить задание\r\n                        </Button>\r\n                        <Provider addTaskStore={this.addTaskStore}>\r\n                            <AddTask />\r\n                        </Provider>\r\n                    </div>\r\n                    <DonateWidget />\r\n                </Provider>\r\n                <Provider taskStore={this.taskStore}>\r\n                    <div className=\"d-flex flex-wrap tasks\">\r\n                        <TaskCard\r\n                            title=\"Лайки\"\r\n                            isLoading={!this.taskStore!.isTasksLikesLoaded}\r\n                            tasks={this.taskStore!.tasksLikes}\r\n                            onRefresh={() => this.handleLikesRefresh()}\r\n                            doText=\"Лайкни\"\r\n                            info={info}\r\n                            onRemove={(id) => {\r\n                                this.taskStore?.removeTaskLikeById(id);\r\n                            }}\r\n                            onComplete={(taskId) => {\r\n                                this.taskStore?.completeTask(taskId, this.props.authStore!.myAccount!.id);\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </Provider>\r\n            </div>\r\n        );\r\n    }\r\n}"],"sourceRoot":""}